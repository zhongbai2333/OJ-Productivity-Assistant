name: Build and Package VSIX

on:
  push:
    branches: [master]
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run production build
        run: npm run package

      - name: Package extension to VSIX
        run: npx @vscode/vsce package

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix
          path: "*.vsix"

  publish-release:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    steps:
      - name: Download packaged VSIX
        uses: actions/download-artifact@v4
        with:
          name: vsix
          path: release

      - name: Generate release notes
        id: release_notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = context.ref.replace('refs/tags/', '');

            const releasesResp = await github.rest.repos.listReleases({ owner, repo, per_page: 100 });
            const releases = releasesResp.data || [];
            const tags = releases.map((release) => release.tag_name);
            const idx = tags.indexOf(tag);
            const prevRelease = idx >= 0 && idx < releases.length - 1 ? releases[idx + 1] : null;
            const since = prevRelease ? prevRelease.published_at : null;
            const prevTag = prevRelease ? prevRelease.tag_name : null;
            const compareUrl = prevTag ? `https://github.com/${owner}/${repo}/compare/${prevTag}...${tag}` : '';

            const params = { owner, repo, state: 'closed', per_page: 100 };
            if (since) {
              params.since = since;
            }

            const issuesResp = await github.rest.issues.listForRepo(params);
            const items = (issuesResp.data || []).filter((item) =>
              !(item.labels || []).some((lbl) => ['wontfix', 'duplicate'].includes(lbl.name?.toLowerCase() ?? ''))
            );

            const groups = { Fix: [], Update: [], Feature: [] };
            for (const item of items) {
              for (const lbl of item.labels || []) {
                if (lbl.name === 'bug') {
                  groups.Fix.push(item);
                } else if (lbl.name === 'update') {
                  groups.Update.push(item);
                } else if (lbl.name === 'enhancement') {
                  groups.Feature.push(item);
                }
              }
            }

            const zh = { Fix: '修复', Update: '更新', Feature: '新增' };
            let body = "# What's Changed\n\n";
            for (const key of ['Fix', 'Update', 'Feature']) {
              if (groups[key].length) {
                body += `## ${key}\n\n`;
                for (const item of groups[key]) {
                  body += `- ${zh[key]}：[#${item.number}](${item.html_url}) ${item.title}\n`;
                }
                body += "\n";
              }
            }

            if (compareUrl) {
              body += `**Full Changelog**: ${compareUrl}\n`;
            }

            return body;

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: OJ Productivity Assistant ${{ github.ref_name }}
          body: ${{ steps.release_notes.outputs.result }}
          files: release/**/*.vsix
